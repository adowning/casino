/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateArcadeGameArgs } from "./CreateArcadeGameArgs";
import { UpdateArcadeGameArgs } from "./UpdateArcadeGameArgs";
import { DeleteArcadeGameArgs } from "./DeleteArcadeGameArgs";
import { ArcadeGameFindManyArgs } from "./ArcadeGameFindManyArgs";
import { ArcadeGameFindUniqueArgs } from "./ArcadeGameFindUniqueArgs";
import { ArcadeGame } from "./ArcadeGame";
import { ArcadeGameService } from "../arcadeGame.service";

@graphql.Resolver(() => ArcadeGame)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ArcadeGameResolverBase {
  constructor(
    protected readonly service: ArcadeGameService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ArcadeGame",
    action: "read",
    possession: "any",
  })
  async _arcadeGamesMeta(
    @graphql.Args() args: ArcadeGameFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ArcadeGame])
  @nestAccessControl.UseRoles({
    resource: "ArcadeGame",
    action: "read",
    possession: "any",
  })
  async arcadeGames(
    @graphql.Args() args: ArcadeGameFindManyArgs
  ): Promise<ArcadeGame[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ArcadeGame, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ArcadeGame",
    action: "read",
    possession: "own",
  })
  async arcadeGame(
    @graphql.Args() args: ArcadeGameFindUniqueArgs
  ): Promise<ArcadeGame | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ArcadeGame)
  @nestAccessControl.UseRoles({
    resource: "ArcadeGame",
    action: "create",
    possession: "any",
  })
  async createArcadeGame(
    @graphql.Args() args: CreateArcadeGameArgs
  ): Promise<ArcadeGame> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ArcadeGame)
  @nestAccessControl.UseRoles({
    resource: "ArcadeGame",
    action: "update",
    possession: "any",
  })
  async updateArcadeGame(
    @graphql.Args() args: UpdateArcadeGameArgs
  ): Promise<ArcadeGame | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ArcadeGame)
  @nestAccessControl.UseRoles({
    resource: "ArcadeGame",
    action: "delete",
    possession: "any",
  })
  async deleteArcadeGame(
    @graphql.Args() args: DeleteArcadeGameArgs
  ): Promise<ArcadeGame | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
