/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFriendRelationshipArgs } from "./CreateFriendRelationshipArgs";
import { UpdateFriendRelationshipArgs } from "./UpdateFriendRelationshipArgs";
import { DeleteFriendRelationshipArgs } from "./DeleteFriendRelationshipArgs";
import { FriendRelationshipFindManyArgs } from "./FriendRelationshipFindManyArgs";
import { FriendRelationshipFindUniqueArgs } from "./FriendRelationshipFindUniqueArgs";
import { FriendRelationship } from "./FriendRelationship";
import { User } from "../../user/base/User";
import { FriendRelationshipService } from "../friendRelationship.service";

@graphql.Resolver(() => FriendRelationship)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class FriendRelationshipResolverBase {
  constructor(
    protected readonly service: FriendRelationshipService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FriendRelationship",
    action: "read",
    possession: "any",
  })
  async _friendRelationshipsMeta(
    @graphql.Args() args: FriendRelationshipFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FriendRelationship])
  @nestAccessControl.UseRoles({
    resource: "FriendRelationship",
    action: "read",
    possession: "any",
  })
  async friendRelationships(
    @graphql.Args() args: FriendRelationshipFindManyArgs
  ): Promise<FriendRelationship[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FriendRelationship, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FriendRelationship",
    action: "read",
    possession: "own",
  })
  async friendRelationship(
    @graphql.Args() args: FriendRelationshipFindUniqueArgs
  ): Promise<FriendRelationship | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FriendRelationship)
  @nestAccessControl.UseRoles({
    resource: "FriendRelationship",
    action: "create",
    possession: "any",
  })
  async createFriendRelationship(
    @graphql.Args() args: CreateFriendRelationshipArgs
  ): Promise<FriendRelationship> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        acceptor: args.data.acceptor
          ? {
              connect: args.data.acceptor,
            }
          : undefined,

        inviter: args.data.inviter
          ? {
              connect: args.data.inviter,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FriendRelationship)
  @nestAccessControl.UseRoles({
    resource: "FriendRelationship",
    action: "update",
    possession: "any",
  })
  async updateFriendRelationship(
    @graphql.Args() args: UpdateFriendRelationshipArgs
  ): Promise<FriendRelationship | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          acceptor: args.data.acceptor
            ? {
                connect: args.data.acceptor,
              }
            : undefined,

          inviter: args.data.inviter
            ? {
                connect: args.data.inviter,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FriendRelationship)
  @nestAccessControl.UseRoles({
    resource: "FriendRelationship",
    action: "delete",
    possession: "any",
  })
  async deleteFriendRelationship(
    @graphql.Args() args: DeleteFriendRelationshipArgs
  ): Promise<FriendRelationship | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async acceptor(
    @graphql.Parent() parent: FriendRelationship
  ): Promise<User | null> {
    const result = await this.service.getAcceptor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async inviter(
    @graphql.Parent() parent: FriendRelationship
  ): Promise<User | null> {
    const result = await this.service.getInviter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
