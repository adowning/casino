/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePrivateMessageArgs } from "./CreatePrivateMessageArgs";
import { UpdatePrivateMessageArgs } from "./UpdatePrivateMessageArgs";
import { DeletePrivateMessageArgs } from "./DeletePrivateMessageArgs";
import { PrivateMessageFindManyArgs } from "./PrivateMessageFindManyArgs";
import { PrivateMessageFindUniqueArgs } from "./PrivateMessageFindUniqueArgs";
import { PrivateMessage } from "./PrivateMessage";
import { User } from "../../user/base/User";
import { PrivateMessageService } from "../privateMessage.service";

@graphql.Resolver(() => PrivateMessage)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PrivateMessageResolverBase {
  constructor(
    protected readonly service: PrivateMessageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PrivateMessage",
    action: "read",
    possession: "any",
  })
  async _privateMessagesMeta(
    @graphql.Args() args: PrivateMessageFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PrivateMessage])
  @nestAccessControl.UseRoles({
    resource: "PrivateMessage",
    action: "read",
    possession: "any",
  })
  async privateMessages(
    @graphql.Args() args: PrivateMessageFindManyArgs
  ): Promise<PrivateMessage[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PrivateMessage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PrivateMessage",
    action: "read",
    possession: "own",
  })
  async privateMessage(
    @graphql.Args() args: PrivateMessageFindUniqueArgs
  ): Promise<PrivateMessage | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PrivateMessage)
  @nestAccessControl.UseRoles({
    resource: "PrivateMessage",
    action: "create",
    possession: "any",
  })
  async createPrivateMessage(
    @graphql.Args() args: CreatePrivateMessageArgs
  ): Promise<PrivateMessage> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        receiver: args.data.receiver
          ? {
              connect: args.data.receiver,
            }
          : undefined,

        sender: args.data.sender
          ? {
              connect: args.data.sender,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PrivateMessage)
  @nestAccessControl.UseRoles({
    resource: "PrivateMessage",
    action: "update",
    possession: "any",
  })
  async updatePrivateMessage(
    @graphql.Args() args: UpdatePrivateMessageArgs
  ): Promise<PrivateMessage | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          receiver: args.data.receiver
            ? {
                connect: args.data.receiver,
              }
            : undefined,

          sender: args.data.sender
            ? {
                connect: args.data.sender,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PrivateMessage)
  @nestAccessControl.UseRoles({
    resource: "PrivateMessage",
    action: "delete",
    possession: "any",
  })
  async deletePrivateMessage(
    @graphql.Args() args: DeletePrivateMessageArgs
  ): Promise<PrivateMessage | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async receiver(
    @graphql.Parent() parent: PrivateMessage
  ): Promise<User | null> {
    const result = await this.service.getReceiver(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async sender(@graphql.Parent() parent: PrivateMessage): Promise<User | null> {
    const result = await this.service.getSender(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
