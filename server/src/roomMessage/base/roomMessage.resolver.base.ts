/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateRoomMessageArgs } from "./CreateRoomMessageArgs";
import { UpdateRoomMessageArgs } from "./UpdateRoomMessageArgs";
import { DeleteRoomMessageArgs } from "./DeleteRoomMessageArgs";
import { RoomMessageFindManyArgs } from "./RoomMessageFindManyArgs";
import { RoomMessageFindUniqueArgs } from "./RoomMessageFindUniqueArgs";
import { RoomMessage } from "./RoomMessage";
import { User } from "../../user/base/User";
import { RoomMessageService } from "../roomMessage.service";

@graphql.Resolver(() => RoomMessage)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class RoomMessageResolverBase {
  constructor(
    protected readonly service: RoomMessageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RoomMessage",
    action: "read",
    possession: "any",
  })
  async _roomMessagesMeta(
    @graphql.Args() args: RoomMessageFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RoomMessage])
  @nestAccessControl.UseRoles({
    resource: "RoomMessage",
    action: "read",
    possession: "any",
  })
  async roomMessages(
    @graphql.Args() args: RoomMessageFindManyArgs
  ): Promise<RoomMessage[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RoomMessage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RoomMessage",
    action: "read",
    possession: "own",
  })
  async roomMessage(
    @graphql.Args() args: RoomMessageFindUniqueArgs
  ): Promise<RoomMessage | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoomMessage)
  @nestAccessControl.UseRoles({
    resource: "RoomMessage",
    action: "create",
    possession: "any",
  })
  async createRoomMessage(
    @graphql.Args() args: CreateRoomMessageArgs
  ): Promise<RoomMessage> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        sender: args.data.sender
          ? {
              connect: args.data.sender,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoomMessage)
  @nestAccessControl.UseRoles({
    resource: "RoomMessage",
    action: "update",
    possession: "any",
  })
  async updateRoomMessage(
    @graphql.Args() args: UpdateRoomMessageArgs
  ): Promise<RoomMessage | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          sender: args.data.sender
            ? {
                connect: args.data.sender,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RoomMessage)
  @nestAccessControl.UseRoles({
    resource: "RoomMessage",
    action: "delete",
    possession: "any",
  })
  async deleteRoomMessage(
    @graphql.Args() args: DeleteRoomMessageArgs
  ): Promise<RoomMessage | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async sender(@graphql.Parent() parent: RoomMessage): Promise<User | null> {
    const result = await this.service.getSender(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
